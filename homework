[Scanner](https://repl.it/@RayRoyal76/Scanner)

import java.util.Scanner;
import java.time.LocalDate;




class Main {
  public static void main(String[] args) {
 Scanner scanner = new Scanner(System.in);

 System.out.println("Please enter your name:");
 String name = scanner.nextLine();

 System.out.println("Please enter your email:");
 String email = scanner.nextLine();

 System.out.println("Please enter today's date:");
 String date = scanner.nextLine();
 LocalDate today = LocalDate.parse(date);

 System.out.println(today);






[Two Sum](https://leetcode.com/problems/two-sum/submissions/)

import java.util.*;


// find the two numbers in array that add up to the target

class Solution {
    public int[] twoSum(int[] nums, int target) {
     
        
    HashMap<Integer, Integer> mySum = new HashMap<>();
     for (int x = 0; x < nums.length; x++) {
         int sum = target - nums[x];
         if (mySum.containsKey(sum)) {
             return new int[] {mySum.get(sum), x};
         } else {
             mySum.put(nums[x], x);
         }
     } 
        return new int[] {};
        
    }
}



[Top K](https://leetcode.com/problems/top-k-frequent-words/submissions/)

class Solution {
    public List<String> topKFrequent(String[] words, int k) {
        HashMap<String, Integer> myMap = new HashMap<>();
        for (int i = 0; i< words.length; i++) {
            myMap.put(words[i],myMap.getOrDefault(words[i],0)+1);
        }
        
        TreeMap<Integer, Set<String>> treemap = new TreeMap<>();
        
        int max = 0;
        for(String key:myMap.keySet()){
            Integer val = myMap.get(key);
            max = Math.max(max, val);
            if(treemap.get(val)==null){
                Set<String> set = new TreeSet<>();
                set.add(key);
                treemap.put(val, set);
            }else {
                treemap.get(val).add(key);
            }
        }
        List<String> out = new ArrayList<>();
        while(k>0) {
         Integer tempk = treemap.floorKey(max);
            Set<String> temp = treemap.get(tempk);
            for (String wordtemp:temp) {
                if(k==0) break;
                out.add(wordtemp);
                k--;
                
            }
            treemap.remove(tempk);
        }
        return out;
    }
}
